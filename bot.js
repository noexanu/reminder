const { Telegraf, Markup } = require('telegraf');
const token = '1726046745:AAEdw4bDsCW2VDMBP1bt5F4wgQ639AD8mIg';
const bot = new Telegraf(token);

//start event
bot.start(ctx => {
  ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 2 –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ü—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –ø—Ä–∏–∫–æ–ª—ã. –ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ <–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å>`, {
    reply_markup: {
      keyboard: [
        ['–ì–ª–∞–≤–Ω–∞—è', '–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å'],
        ['–•—Ç–æ —è?', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ...'],
        ['–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
      ],
      resize_keyboard: true
    }
  });
});

//keyboard events
bot.hears('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å', ctx => {
  ctx.reply('<b>–≠—Ç–æ</b> –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è <i>–Ω–æ–≤–æ—Å—Ç—å</i>', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[
        { text: 'üëç', callback_data: 'like' },
        { text: 'üôÅ', callback_data: 'whatever' },
        { text: 'üëé', callback_data: 'dislike' }
      ]]
    }
  });
});

bot.hears('–ì–ª–∞–≤–Ω–∞—è', ctx => 
  ctx.reply('–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É <i><b>–ì–õ–ê–í–ù–ê–Ø</b></i>', { 
    parse_mode: 'HTML' 
  })
);

bot.hears('–•—Ç–æ —è?', ctx => 
  ctx.reply(ctx.message)
);

bot.hears('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ...', ctx => {
  return ctx.reply(
    'Special buttons keyboard',
    Markup.keyboard([
      Markup.button.contactRequest('Send contact'),
      Markup.button.locationRequest('Send location')
    ]).resize()
  )
});

bot.hears('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', ctx => 
  ctx.reply('–û—Å—Ç–∞–≤—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', {
    reply_markup: {
      force_reply: true
    }
  })
);

bot.on('message', ctx => { 
  const isReply = ctx.update.message.reply_to_message ? true : false;
  let message;
  if(isReply) {
    const reply = ctx.update.message.reply_to_message;
    const isBotReply = 
      reply.from.is_bot === true && 
      reply.from.username === 'Szaszlychok_bot' ? true : false;
    const isCommentReply = 
      reply.text === '–û—Å—Ç–∞–≤—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:' ? true : false;
    switch(true) {
      case isCommentReply:
        message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ—Ç–∞—Ä–∏–π!';
        break;
      case isBotReply:
        message = '–Ø –ø—Ä–∏–Ω–∏–º–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å. –ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å <–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>.';
        break;
      default:
        message = '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞... –ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
    }
  } else {
    message = '–£–ø—Å, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
  }
  ctx.reply(message, {
    reply_markup: {
      keyboard: [
        ['–ì–ª–∞–≤–Ω–∞—è', '–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å'],
        ['–•—Ç–æ —è?', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ...'],
        ['–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
      ],
      resize_keyboard: true
    }
  })
})



//inline keyboard events
bot.action('like', async ctx => {
  await ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({
    inline_keyboard: [[
      { text: 'GREAT!', callback_data: 'like' },
      { text: 'üôÅ', callback_data: 'whatever' },
      { text: 'üëé', callback_data: 'dislike' }
    ]]
  });
  ctx.reply('–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è! –ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, —è –º–æ–≥—É –º–µ–Ω—è—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–æ–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é');
});

bot.action('whatever', async ctx => {
  await ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({
    inline_keyboard: [[
      { text: 'üëç', callback_data: 'like' },
      { text: 'Ah...', callback_data: 'whatever' },
      { text: 'üëé', callback_data: 'dislike' }
    ]]
  });
  ctx.reply('–ù—É –¥–∞... –ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, —è –º–æ–≥—É –º–µ–Ω—è—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–æ–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é');
});

bot.action('dislike', async ctx => {
  await ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({
    inline_keyboard: [[
      { text: 'üëç', callback_data: 'like' },
      { text: 'üôÅ', callback_data: 'whatever' },
      { text: '...', callback_data: 'dislike' }
    ]]
  });
  ctx.reply('–ì—Ä—É—Å—Ç–Ω–æ... –ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ, —è –º–æ–≥—É –º–µ–Ω—è—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–æ–ø–æ–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é');
});



bot.launch();



// bot.on('animation', () => console.log('animation'))
// bot.on('audio', () => console.log('audio'))
// bot.on('callback_query', () => console.log('callback_query'))
// bot.on('channel_chat_created', () => console.log('channel_chat_created'))
// bot.on('channel_post', () => console.log('channel_post'))
// bot.on('chat_member', () => console.log('chat_member'))
// bot.on('chosen_inline_result', () => console.log('chosen_inline_result'))
// bot.on('connected_website', () => console.log('connected_website'))
// bot.on('contact', () => console.log('contact'))
// bot.on('delete_chat_photo', () => console.log('delete_chat_photo'))
// bot.on('dice', () => console.log('dice'))
// bot.on('document', () => console.log('document'))
// bot.on('edited_channel_post', () => console.log('edited_channel_post'))
// bot.on('edited_message', () => console.log('edited_message'))
// bot.on('forward_date', () => console.log('forward_date'))
// bot.on('game', () => console.log('game'))
// bot.on('group_chat_created', () => console.log('group_chat_created'))
// bot.on('inline_query', () => console.log('inline_query'))
// bot.on('invoice', () => console.log('invoice'))
// bot.on('left_chat_member', () => console.log('left_chat_member'))
// bot.on('location', () => console.log('location'))
// bot.on('message', () => console.log('message'))
// bot.on('message_auto_delete_timer_changed', () => console.log('message_auto_delete_timer_changed'))
// bot.on('migrate_from_chat_id', () => console.log('migrate_from_chat_id'))
// bot.on('migrate_to_chat_id', () => console.log('migrate_to_chat_id'))
// bot.on('my_chat_member', () => console.log('my_chat_member'))
// bot.on('new_chat_members', () => console.log('new_chat_members'))
// bot.on('new_chat_photo', () => console.log('new_chat_photo'))
// bot.on('new_chat_title', () => console.log('new_chat_title'))
// bot.on('passport_data', () => console.log('passport_data'))
// bot.on('photo', () => console.log('photo'))
// bot.on('pinned_message', () => console.log('pinned_message'))
// bot.on('poll', () => console.log('poll'))
// bot.on('poll_answer', () => console.log('poll_answer'))
// bot.on('pre_checkout_query', () => console.log('pre_checkout_query'))
// bot.on('proximity_alert_triggered', () => console.log('proximity_alert_triggered'))
// bot.on('shipping_query', () => console.log('shipping_query'))
// bot.on('sticker', () => console.log('sticker'))
// bot.on('successful_payment', () => console.log('successful_payment'))
// bot.on('supergroup_chat_created', () => console.log('supergroup_chat_created'))
// bot.on('text', () => console.log('text'))
// bot.on('venue', () => console.log('venue'))
// bot.on('video', () => console.log('video'))
// bot.on('video_note', () => console.log('video_note'))
// bot.on('voice', () => console.log('voice'))
// bot.on('voice_chat_ended', () => console.log('voice_chat_ended'))
// bot.on('voice_chat_participants_invited', () => console.log('voice_chat_participants_invited'))
// bot.on('voice_chat_scheduled', () => console.log('voice_chat_scheduled'))
// bot.on('voice_chat_started', () => console.log('voice_chat_started'))